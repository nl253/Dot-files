[init]
	templatedir = /home/norbert/.git-templates

[user]
	email = nl253@kent.ac.uk
	name = nl253

[diff]
	renames = copies  # Detect copies as well as renames
	tool = vimdiff

[merge]
	log = true  # Include summaries of merged commits in newly created merge commit messages
	# tool = vimdiff

[help]
	autocorrect = 1  # Automatically correct and execute mistyped commands

[apply]
	whitespace = fix # Detect whitespace errors when applying a patch

[color]
	ui = true
	#diff = auto
	#status = auto
	#branch = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = "red bold 52"
	newNormal = "green bold"
	newHighlight = "green bold 22"

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

[alias]
	# form tpope
	cherry-lick = !sh -c 'hub checkout HEAD^{} -- && hub cherry-pick \"$@\"' _
	recursive-update = "!sh -c 'find \"${@:-.}\" -type d -name .git -exec dirname {} \\; -exec git --git-dir={} remote update \\;' _"

	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"   # Switch to a branch, creating it if necessary
	
	contributors = shortlog --summary --numbered  # List contributors with number of commits
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"  # Credit an author on the latest commit

	branches = for-each-ref --sort=-committerdate --format=\"%(color:blue)%(authordate:relative)\t%(color:red)%(authorname)\t%(color:white)%(color:bold)%(refname:short)\" refs/remotes

	# CLONE
	# -------------------
	cl = clone --recursive  # Clone a repository including all submodules
	
	# DIFF
	# -------------------
	d = difftool
	;dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"  # Remove branches that have already been merged with master # a.k.a. ‘delete merged’

	# FIND
	# -------------------
	find-branch = "!f() { git branch -a --contains $1; }; f"  # Find branches containing commit
	find-tag = "!f() { git describe --always --contains $1; }; f"  # Find tags containing commit
	# Find commits by source code
	find-commit = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	# Find commits by commit message
	find-message = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	
	# LOG
	# -------------------
	l = log --pretty=oneline -n 20 --graph --abbrev-commit   # SHORT VERSION abbreviated SHA, description, and history graph for the latest 20 commits
	;lg = log --graph --pretty=format:'%C(bold)%h%Creset%C(magenta)%d%Creset %s %C(yellow)<%an> %C(cyan)(%cr)%Creset' --abbrev-commit --date=relative
	log = log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=relative 

	
	# Merge GitHub pull request on top of the current branch or,
	# if a branch name is specified, on top of the specified branch
	mpr = "!f() { \
		declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
		declare branch=\"${2:-$currentBranch}\"; \
		if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
			git fetch origin refs/pull/$1/head:pr/$1 && \
			git checkout -B $branch && \
			git rebase $branch pr/$1 && \
			git checkout -B $branch && \
			git merge pr/$1 && \
			git branch -D pr/$1 && \
			git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
		fi \
	}; f"

	# PUSH
	# -------------------
	remotes = remote -vu = pull --rebase upstream master
	reb = "!r() { git rebase -i HEAD~$1; }; r"  # Interactive rebase with the given number of latest commits
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r" # Remove the old tag with this name and tag the latest commit with it.

[github]
	password = Kruszynka96**
	user = nl253

[web]
	browser = google-chrome-stable

# ---------------
# URL shorthands
# ---------------
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
	insteadOf = "github:"

[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
	insteadOf = "gist:"interactive = auto
[difftool]
	prompt = false
[gg]
	username = nl253
