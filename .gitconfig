[init]
	templatedir = ~/.git-templates

[user]
	email = norbertlogiewa96@gmail.com
	name = nl253

[diff]
	renames = copies  # Detect copies as well as renames
	tool = vimdiff

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	tool = vimdiff
	conflictstyle = diff3

[help]
	 # Automatically correct and execute mistyped commands
	autocorrect = 0  

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix 

[color]
	ui = true

[color "branch"]
	current = magenta bold
	local = normal
	remote = yellow

[color "diff"]
	meta = "127"
	frag = magenta bold # line info
	old = "167" 		# deletions
	new = "78" 		    # additions

[color "diff-highlight"]
	oldNormal = "167 bold"
	oldHighlight = "167 reverse"
	newNormal = "78"
	newHighlight = "78 reverse"

[color "status"]
	added = green
	changed = "yellow bold"
	untracked = "normal bold"
	header = "white dim"
	nobranch = "red dim"

[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore-global
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space
	compression = 9
	pager = less -R

[alias]

	aliases = "!git config -l | grep alias | sed 's/^alias\\.//g'"

	backup-untracked = "!git ls-files --others -i --exclude-standard | xargs zip untracked.zip"

	unpushed = log --branches --not --remotes

	grep = grep --perl-regexp --line-number --color=always --full-name --heading --break 

	untracked = ls-files --others

	version-tree = log --pretty=oneline --graph --decorate --all
 
	add = add -v

	# blame = "!f(){ less -XRI <<< git blame --pretty=full --date=rfc --indent-heuristic --color-words --dense --date-order --extended-regexp --minimal --show-number $@ | pygmentize -l $(pygmentize -N $@) }; f"

	branch = branch -vv

	log = log --stat --format=\"________________________________________________________________%n%n%C(93)%H%n%n%C(184)%an%Creset [%ae] %C(173)%ar%Creset%n%n%C(204 bold)%s%Creset%n%b\"

	cherry = cherry --verbose

	back = checkout HEAD^1

	forward = "!git log --reverse --pretty=%H master | grep -A 1 $(git rev-parse HEAD) | tail -n1 | xargs git checkout"

	# quick add unstaged, commit using "Quick Commit" as a message and push upstream.
	qq = "!git commit -a -m \"Quick commit. Nothing important ...\" ; git push" 

	 # Find branches containing commit
	find-branch = "!f() { git branch -a --contains $1; }; f"  

	 # Find tags containing commit
	find-tag = "!f() { git describe --always --contains $1; }; f"  

	# Find commits by source code
	find-commit = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	find-message = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	 # List contributors with number of commits
	contributors = shortlog --summary --numbered  

	# form tpope
	recursive-update = "!sh -c 'find \"${@:-.}\" -type d -name .git -exec dirname {} \\; -exec git --git-dir={} remote update \\;' _"

    zipit = "archive --format=zip --output=repo.zip --verbose -9 HEAD"
    tarit = "archive --format=tar --output=repo.tar --verbose HEAD"
    clean = "clean --interactive"

[web]
	browser = chromium

[difftool]
	prompt = false

[credential]
	helper = store

# vim: ts=4 sw=4
[sendemail]
	smtpserver = smtp.gmail.com
	smtpserverport = 587
	smtpencryption = tls
	smtpuser = norbertlogiewa96@gmail.com
