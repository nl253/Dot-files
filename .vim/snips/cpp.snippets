extends c  

# don't extend cfamily (c already does that!)

snippet try "Try catch [c]"
try {
  risky();
} catch (const exception &e) {
  const chae *msg = e.what();
}
endsnippet

# loops 

snippet fore "Enchanced for loop (fore) [cpp]"
for (auto i : container) {
  cout << i;
}
endsnippet

snippet iter "Iterator [cpp]"
vector<int> vec;
for (std::vector<int>::iterator it = vec.begin(); it != vec.end(); ++it) {
      std::cout << ' ' << *it;
}
endsnippet

snippet "opt(ional)?" "std::optional [cpp]" r
optional<${1:string}> ${2:optionallyReturn}(${3:bool returnOrNot}) {
}
endsnippet

snippet "cout|print" "Print [cpp]" r
cout << ${1:"message\n"} << endl;
endsnippet

snippet "typed(ef)?" "Type definiton [cpp]" r
typedef ${1:point} ${2:*(*point_compare_func_type) (point *a, point *b)};
endsnippet

snippet enum "Enum [cpp]"
enum dayOfWeek { x, y, z };
endsnippet

snippet class "Class [cpp]"
class MedalCount {
 public:
  const char *country;
  int gold;
  int silver;
  int bronze;
};
endsnippet


# collections

snippet map "std::map [cpp]"
map<${1:key}, ${2:value}> ${3:myMap}
endsnippet

snippet "deque|queue" "std::deque [cpp]" r 
deque<${1:int}> ${2:myDeque}
endsnippet

snippet heap "std::priority_queue [cpp]"
priority_queue<${1:int}> ${2:heap}
endsnippet 

snippet list "std::list [cpp]"
list<${1:int}> ${2:myList};
endsnippet

snippet unomap "std::unordered_map [cpp]"
unordered_map <${1:key}, ${2:value}> ${3:myMap}
endsnippet

snippet set "std::set [cpp]"
set<${1:int}> ${2:myOrderedSet}
endsnippet

snippet unoset "std::unordered_set [cpp]"
unordered_set<${1:int}> ${2:myUnOrderedSet}
endsnippet

snippet "vec(t(or)?)?" "std::vector [cpp]" r
vector<${1:char}> ${2:vec}
endsnippet

snippet pair "Pair [cpp]"
pair<${1:int}, ${2:string}> ${3:myPair}
endsnippet

snippet tuple "Tuple [cpp]"
tuple<${1:int}, ${2:string}, ${3:}> ${3:myTuple}
endsnippet

snippet array "std::array [cpp]" 
array<${1:int}, ${2:3}> ${4:arrayOfInts}
endsnippet

snippet "var(iant)" "std::variant [cpp]" r
variant<${1:int}, ${2:float}> ${3:myVariant}
endsnippet

# utils

snippet read "Read from a file [cpp]"
optional<string> readFile(string fileName) {
  ifstream inFile(fileName); // stream to the file
  string buffer; // tmp data holder 
  string result; // will be returned

  if (inFile.bad()) return {}; // IO issues

  cout << "[INFO] " + fileName + " open \n"; 

  while (!inFile.eof()) {
    inFile >> buffer; // ex from inFile push to the buffer
    result += buffer; // join with result
  }

  inFile.close(); // close stream
  return result;
}
endsnippet

snippet write "Write to a file [cpp]"
void writeToFile(string fileName, string content) {
  ofstream outFile(fileName);
  outFile << content;
}
endsnippet 

snippet "run|popen|capture|subpr(o?c(ess)?)" "Read stdout from a pipe [cpp]" r
optional<string> run(string &command) {

  FILE *fp = popen(command.c_str(), "r");

  if (fp == NULL) return {};

  string result;

  const int max_buffer = 256;

  char buffer[max_buffer];

  while (!feof(fp))
    if (fgets(buffer, max_buffer, fp) != NULL)
      result.append(buffer);

  pclose(fp);
  return result;
}
endsnippet
