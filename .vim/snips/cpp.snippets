extends c  

# don't extend cfamily (c already does that!)

snippet main "Main method [cpp]"
#include <stdio.h>
#include <vector>
#include <iostream> 
int main(int argc, const char *argv[]) {
  
}
endsnippet

snippet try "Try catch [c]"
try {
  risky();
} catch (const exception &e) {
  const chae *msg = e.what();
}
endsnippet

# loops 

snippet fore "Enchanced for loop (fore) [cpp]"
for (auto i : container) {
  cout << i;
}
endsnippet

snippet iter "Iterator [cpp]"
vector<int> vec;
for (std::vector<int>::iterator it = vec.begin(); it != vec.end(); ++it) {
      std::cout << ' ' << *it;
}
endsnippet

snippet "opt(ional)?" "std::optional [cpp]" r
optional<string> ${1:optionallyReturn}(${2:bool returnOrNot}) {
  ${3:// optional can be used as the return type of a factory that may fail
  if (b) return "Godzilla";
  return {};}
}
endsnippet

snippet "cout|print" "Print [cpp]" r
cout << ${1:"message\n"};
endsnippet

snippet enum "Enum [cpp]"
enum dayOfWeek { x, y, z };
endsnippet

snippet class "Class [cpp]"
class ${1:MedalCount} {
public:
  ${2:const char *country;
  int gold;
  int silver;
  int bronze;}
};
endsnippet

# collections

snippet map "std::map [cpp]"
map<${1:key}, ${2:value}> myMap$0;
endsnippet

snippet "deque|queue" "std::deque [cpp]" r 
deque<${1:int}> ${2:myDeque}${3: = {7, 5, 16, 8}};
endsnippet

snippet heap "std::priority_queue [cpp]"
priority_queue<${1:int}> ${2:heap};
endsnippet 

snippet list "std::list [cpp]"
list<${1:int}> ${2:myList}${3: = { 7, 5, 16, 8 }};
endsnippet

snippet unomap "std::unordered_map [cpp]"
unordered_map <${1:key}, ${2:value}> myMap$0;
endsnippet

snippet set "std::set [cpp]"
set<${1:key}, ${2:value}> mySet$0;
endsnippet

snippet unoset "std::unordered_set [cpp]"
unordered_set<${1:key}, ${2:value}> mySet$0;
endsnippet

snippet "vec(t(or)?)?" "std::vector [cpp]" r
vector<${1:char}> vec$0;
endsnippet

snippet pair "Pair [cpp]"
auto myPair = make_pair(${1:_T1 &&__x}, ${2:_T2 &&__y});
endsnippet

snippet tuple "Tuple [cpp]"
auto t = make_tuple(${1:_Elements &&__args...});
endsnippet

snippet array "std::array [cpp]" 
array<${1:int}, ${2:3}> ${4:arrayOfInts}${5:{1, 2, 3}}; 
endsnippet

snippet "var(iant)" "std::variant [cpp]" r
std::variant<${1:int}, ${2:float}> ${3:myVariant};
endsnippet

# utils

snippet read "Read from a file [cpp]"
// accept c++ strings
optional<string> readFile(string fileName) {
  ifstream inFile(fileName); // stream to the file
  string buffer; // tmp data holder 
  string result; // will be returned

  if (inFile.bad()) return {}; // IO issues

  cout << "[INFO] " + fileName + " open \n"; 

  while (!inFile.eof()) {
    inFile >> buffer; // ex from inFile push to the buffer
    result += buffer; // join with result
  }

  inFile.close(); // close stream
  return result;
}

// overloaded to accept c-strings
optional<string> readFile(char* fileName) {
	return readFile(string(fileName));
}
endsnippet

snippet write "Write to a file [cpp]"
ofstream f("/tmp/test4");
int i;

for (i = 0; i < 10; ++i) {
  f << i << endl;
}
f.close();
if (0 != f.fail()) {
  // handle error
}
endsnippet 
