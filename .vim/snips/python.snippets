snippet "init|__i((ni?)?t)?" "constructor [python]" r
def __init__(self, ${1:value}: ${2:Text}):
    self._${3:something} = ${4:value}
endsnippet

snippet "diff[eretiate]?" "sympy differentiate [python]" br
import sympy
x, y, z = sympy.symbols('x y z')
expr = (x**2 + y * x + 2 / x + sympy.log(2, x)).simplify()
print(sympy.diff(expr, x))
endsnippet

snippet integrate "sympy integrate [python]" b
import sympy
x, y, z = sympy.symbols('x y z')
expr = (x**2 + y * x + 2 / x + sympy.log(2, x)).simplify()
print(sympy.integrate(expr, x))
endsnippet

snippet simplify "sympy simplify algebraic expression [python]" b
import sympy
x, y = sympy.symbols('x y')
expr = x**2 + y * x + 2 / x + sympy.log(2, x)
print(expr.simplify())
endsnippet

snippet #! "shebang python [python]"
#!/usr/bin/env python3 
endsnippet

snippet print "print (...) [python]" 
print("${1:HELLO}")
endsnippet

snippet printf "printf (...) [python]" 
print(f"${1:HELLO}")
endsnippet

snippet "elif?" "elif ... : ... [python]" r
elif ${1:CONDITION}:
    pass
endsnippet

snippet if "if Statement [python]" 
if ${1:CONDITION}:
    pass
endsnippet

snippet else "else : ... [python]" 
else:
    ${1:pass}
endsnippet

snippet urlopen "read from a website [python]" 
from urllib.request import urlopen
try:
	with urlopen('https://www.some.com', timeout=10) as website:
		HTML: Text = website.read().decode('utf-8')
except Exception as e:
	print(e)
endsnippet

snippet "argp(ar(se?)?)?" "argparse boilerplate [python]" r
from argparse import Namespace, ArgumentParser

parser: ArgumentParser = ArgumentParser(
        prog="project",
        description="",
        epilog="")

parser.add_argument(
        "-v",
        "--verbosity",
        help="increase output verbosity",
        action="count")

args: Namespace = parser.parse_args()
endsnippet

snippet class "class ... (...) : ... [python]"
class ${1:NewClass}(${2:InheritFrom}):

    def __init__(self):
        super().__init__()
        pass
endsnippet

snippet "re(g(ex?)?)?" "regex [python]" r
import re
from typing import Pattern

pattern: Pattern = re.compile("${1:PATTERN}")
matches: List[Text] = pattern.findall(${2:STRING_VARIABLE})
endsnippet

snippet "(re(g(ex?)?)?)?groups" "match object with groups" r
groups: Tuple[str, str] = regex_object.groups(${1:0})
endsnippet

snippet "set[ter]{,3}" "setter [python]" r
@${1:PROPERTY}.setter
def ${2:PROPERTY}(new_value: Any):
    self._${3:PROPERTY} = new_value

endsnippet

snippet "doc[string]{,6}" "function docstring [python]" r
"""this function ${1:DOES_THIS_AND_THAT}.
"""
endsnippet

snippet "[unit]{,4}test" "unit test [python]" r
import unittest

class MyObjectTest(unittest.TestCase):

     def setUp(self):
        pass # prepare

     def tearDown(self):
        pass # clean up 

    def test_method1(self):
        self.assertEqual('foo'.upper(), 'FOO')

if __name__ == '__main__':
    unittest.main()
endsnippet

snippet main "if __name__ == __main__ [python]" 
def main():
    ${1:pass}

if __name__ == '__main__':
    main()
endsnippet

snippet "fun((ct?)ion)?|meth(od?)?|def" "function [python]" r
def ${1:FUNCTION}(${2:})${3:}:
    ${4:pass}
endsnippet

snippet "exp(an)?d" "expand variables [python]" r
def expand(text: str) -> str:
    return os.path.expandvars(os.path.expanduser(text))
endsnippet

snippet "doc(str(ing)?)?" "doc string [python]" r
"""
File: `!p 
import re
snip.rv = re.sub("\.\w+$", "", snip.fn)`
Author: `echo $USER`
Email: $EMAIL
Github: $GITHUB
Description: Project Description
"""
endsnippet

snippet faker "Faker [python]" 
import faker
from faker import Faker
fake_data: Faker = faker.Faker()
endsnippet

snippet write "write to a file [python]" 
with open('${1:file_name.txt}', encoding='utf-8', mode="w") as f:
	f.write(${2:TEXT})
endsnippet

snippet read "read from a file [python]"
with open('${1:file_name.txt}', encoding='utf-8') as f:
	text: Text = f.read()
endsnippet

snippet while "while loop [python]" 
while ${1:True}:
	${2:pass}
endsnippet

snippet "prop(erty)?" "property [python]" r
@property
def ${1:function}() -> ${2:Any}:
    return self._${3:value}
endsnippet

snippet "log|info" "log.info (...) [python]" r
log.info(f"${1:variable} is {${2:variable}}")
endsnippet

snippet "warn(ing)?" "log.warn (...) [python]" r
log.warn(f"${1:variable} is {${2:variable}}")
endsnippet

snippet "err(or)?" "log.error (...) [python]" r
log.error(f"${1:variable} is {${2:variable}}")
endsnippet

snippet "cri[tical]{,5}" "log.critical (...) [python]" r
log.critical(f"${1:variable} is {${2:variable}}")
endsnippet

snippet "logger|logging" "logging [python]" r
import logging
from logging import Logger

logging.basicConfig(
    level=logging.DEBUG,
    filemode='w',
    format='%(processName)s %(threadName)s %(module)s %(levelname)s [%(asctime)s] [%(lineno)s] %(message)s.',
    datefmt="%M:%S")

log: Logger = logging.getLogger(name=__name__)
endsnippet

snippet "breakp(oint)?|bp" "debugging break-point [python]" r
import ipdb ; ipdb.set_trace() # XXX
endsnippet

snippet try "try : ... except ... as ... : ... [python]" 
try:
    exec(f'import {i}')
except Exception as e:
    print(f"eRROR {e}")
endsnippet

snippet "downl(oad)?|fetch(er)?" "download or read file [python]" r
import re
import os
from typing import Dict
import shutil

def fetcher(variables: Dict[str, str], source: str, output: str) -> None:

    source: str = source.strip()
    output: str = expand(output).strip()

    if not os.path.exists(output):

        if re.compile('^https?').search(source):

                local_file.close()

        elif isfile(expand(source)):

            source = expand(source)
            print('file_fetcher: a valid file detected: {source}')
            print('file_fetcher: copying')
            shutil.copy(source, output)

        else:
            print(f'Invalid source {source}.')
endsnippet


snippet "templ(ate)?" "templating boilerplate [python]" r
from typing import Dict

variables: Dict[str, str] = {}

def template_substitute(file_name: str, variables: Dict[str, str]) -> str:
    with open(file_name, encoding='utf-8') as target_file:
        template = string.Template(target_file.read())
        target_file.close()

    with open(file_name, mode="w", encoding='utf-8') as target_file:
        target_file.write(template.safe_substitute(variables))
        target_file.close()
endsnippet

snippet "jsonr(ead)?" "jSON read from file [python]" r
import json
from typing import Any, Dict, Optional

def json_read() -> Optional[Dict[Any, Any]]:
    with open(os.path.expanduser('~/.projectrc.json'), encoding="utf-8") as json_file:
		user_configuration = json.loads(json_file.read(), encoding="utf-8")
		return user_configuration
endsnippet

snippet "stack|sci(py?)?" "import the whole scipy stack [python]" r
import numpy as np
import pandas as pd
import scipy as sc
from scipy import stats, stats
endsnippet

snippet "complet[oe]r" "prompt Toolkit completer [python]" r 
import shlex
from typing import List

from prompt_toolkit.completion import Completer
from prompt_toolkit.document import Document
from completions import sql_completions

class MyCustomCompleter(Completer):
    def get_completions(self, document: Document, complete_event):
        try:
            line: str = document.current_line
            args: List[str] = shlex.split(document.current_line)
            if len(args) > 0:
                curr_word: str = document.get_word_under_cursor(WORD=True)
                first_word: str = shlex.split(document.current_line)[0]
                previous_word: str = shlex.split(
                    document.current_line_before_cursor)[
                        len(shlex.split(document.current_line_before_cursor)) -
                        1]

                for i in sql_completions(document):
                    if i.text.startswith(
                            curr_word.upper()) or i.text.startswith(curr_word):
                        yield i

        except (NameError, ValueError):
            pass

endsnippet

snippet "sql(i(te?)?)?|datab(ase)?|db" "sQLite3 [python]" r
import sqlite3
from sqlite3 import Cursor, Connection
from typing import , Callable, Union
import os

SQLiteDataType = Union[str, float, int, None]
Row = Tuple[SQLiteDataType, ...]

database_path: str = '${1:db_path}'

if os.path.exists(database_path):
    print('Existing database detected...')
else:
    print(f'New database will be dropped in {database_path}.')
connection: Connection = sqlite3.connect(database_path)

def query(query_string: Text, data: Iterable):
	with connection:
		with connection.cursor() as cursor:
			for row in cursor.execute(query_string, data):
				print(row)
endsnippet

snippet "type?(ing)?" "import types from typing [python]" r
from typing import ${1:Text, List, Tuple, Any, Iterable}
endsnippet

snippet pathlib "file access utils - pathlib [python]" 
import os
from pathlib import Path
endsnippet

snippet copy "copy objects [python]" 
from copy import copy
endsnippet

snippet pprint "pPrinting [python]" 
from pprint import pprint
pprint(${1:"data"})
endsnippet

snippet islice "itertools iterator slice [python]" 
from itertools import islice
slice: Iterable = islice(${1:iterable}, ${2:start}, ${3:stop})
endsnippet

snippet "red(uce)?" "functools reduce [python]" r
from functools import reduce
reduced: Iterable = reduce(${1:function}, ${2:iterable})
endsnippet

snippet glob "uNIX-style globs [python]" 
from glob import glob, iglob
nodes: List[Text] = glob('${1:DIRNAME}/**', recursive=True)
endsnippet

snippet fnmatch "file name match [python]" 
import fnmatch

for file in ${1:LIST_OF_FILES}:
    if fnmatch.fnmatch(file, '*.txt'):
        print('MATCH!')
endsnippet

snippet "fori?" "for loop [python]" r
for i in ${1:iterable}:
    ${2:# DO_SOMETHING}
endsnippet

snippet fnfilter "file name match [python]" 
import fnmatch

filetered_nodes: List[Text] = fnmatch.filter(${1:file}, '*.${2:txt}')
endsnippet

snippet "tempf(ile?)?" "temporary file [python]" r
from tempfile import TemporaryFile
fp = TemporaryFile()

endsnippet

snippet "tempd(ir?)?" "temporary dir [python]" r
from tempfile import TemporaryDirectory
fp = TemporaryFile()

endsnippet

snippet "op?conc(at)?" "concat function [python]" r
from operator import concat
endsnippet

snippet "op{,2}?add" "add function [python]" r
from operator import add
endsnippet

snippet "op{,2}cont(ains?)?" "add function [python]" r
from operator import contains
endsnippet

snippet "op{,2}?count([Oo]f)?" "countOf function [python]" r
from operator import countOf # number occurrences of b in a.
endsnippet

snippet "op{,2}?xor" "XOR function [python]" r
from operator import xor 
endsnippet

snippet "op{,2}?or" "OR function [python]" r
from operator import or 
endsnippet

snippet "op{,2}?neg" "OR function [python]" r
from operator import neg 
endsnippet

snippet "op{,2}?mod" "modulus function [python]" r
from operator import mod 
endsnippet

snippet "csv(read(er)?)?" "CSV reader [python]" r
import csv
with open('${1:CSV_FILENAME}.csv') as csvfile:
    reader = csv.reader(csvfile)
    for row in reader:
        print(', '.join(row))
endsnippet

snippet "csvw(riter?)?" "CSV writer [python]" r
import csv
with open('${1:CSV_FILENAME}.csv', 'w') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(['Spam'] * 5 + ['Baked Beans'])
    writer.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])
endsnippet

snippet with "with ... as ... : ... [python]"
with ${1:open(FILE)}${2: as f}:
    ${2:pass}
endsnippet
