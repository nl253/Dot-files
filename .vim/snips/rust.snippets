snippet while "While loop [rust]" Ab
while ${1:condition} {

}

endsnippet 


snippet main "Main [rust]" 

fn main() {
	
	${1:// DO STUFF HERE.}

}

endsnippet 

snippet trait "Trait (Interface) [rust]" Ab
trait ${1:HasArea} {
    fn ${2:area}(&self) -> ${3:f64};
}

endsnippet 

snippet "clojure|lambda" "Clojure (Lambda) [rust]" rA
|x: ${1:i32}| ${2:x + 1}
endsnippet

snippet "(derive)?debug" "Debugging printing [rust]"
#[derive(Debug)]
endsnippet


snippet "fn " "Function [rust]" rAb
fn ${1:area}(${2:rectangle}: ${3:&Rectangle}) -> ${4:u32} {
    ${5:return rectangle.length * rectangle.width}
}

endsnippet 


snippet for "While loop [rust]" Ab
for item in ${1:iterable} {

}

endsnippet 

snippet use "Standard Library [rust]" Ab
use std::${1:collections}::${2:HashMap};
endsnippet 

snippet "(match)|(switch)" "Switch (match) [rust]" rAb
match ${1:expression} {
	${2:pattern} => ${3:expression},
	${4:pattern} => ${5:expression},
	${VISUAL}${6:${VISUAL/(.*)/_/}} => ${0:expression},
}
endsnippet

snippet elif "else if ... (elif)"
else if ${1:condition} {
	${VISUAL}${2:${VISUAL/(.*)//}}
} ${0}
endsnippet

snippet "stru(ct?)?" "Struct [rust]" rAb

struct ${1:Point} {
    ${2:x}: ${3:i32},
    ${4:y}: ${5:i32},
}

endsnippet 

snippet print "Print [rust]" A
println!("${2:The value is: \{\}}", ${1:item});
endsnippet 

snippet let "Let mutable [rust]" Ab
let ${2:} ${1:VARIABLE_NAME}: ${3:i32} = ${4:23};
endsnippet 

snippet enum "Enum [rust]" Ab
enum ${1:Message} {
    ${2:Quit},
    ${3:ChangeColor}: i32,
}

endsnippet 

snippet "((h(ash)?)?set)" "HashSet [rust]" r
let mut ${1:set}: HashSet<${2:i32}> = HashSet::new();
endsnippet 

snippet impl "Rust implement method block [rust]" Ab
impl ${1:Circle} {

}
endsnippet

snippet "((h(ash)?)?map|dict)" "HashMap [rust]" r
let ${3:mut} ${2:dictionary}: HashMap<${1:i32}> = HashMap::new();
endsnippet 

snippet bmap "BTreeMap [rust]" 
let ${3:mut} ${2:dictionary}: BTreeMap<${1:i32}> = BTreeMap::new();
endsnippet 

snippet "deq(ue)?" "VecDeque [rust]" r
let ${3:mut} ${2:deque}: VecDeque<${1:i32}> = VecDeque::new();
endsnippet 

snippet "vect(or?)?" "Vector [rust]" r
let ${3:mut} ${1:vector}: Vec<${1:i32}> = Vec::new();
endsnippet 

snippet vec "Vector [rust]" 
let ${3:mut} ${1:vector} = vec![${2:}];
endsnippet 

snippet "(p?que(ue)?|heap)" "BinaryHeap [rust]" r
let ${3:mut} ${2:queue}: BinaryHeap<${1:i32}> = BinaryHeap::new();
endsnippet 

snippet "(l(i(n(k(ed?)?)?)?)?)?list" "LinkedList [rust]" r
let ${3:mut} ${2:list}: LinkedList<${1:i32}> = LinkedList::new();
endsnippet 
