snippet while "While loop [rust]" Ab

while ${1:condition} {

}

endsnippet 

snippet for "While loop [rust]" Ab

for item in ${1:iterable} {

}

endsnippet 

snippet use "Standard Library [rust]" Ab
use std::${1:collections}::${2:HashMap};
endsnippet 

snippet "(match)|(switch)" "Switch (match) [rust]" rAb
match ${1:expression} {
	${2:pattern} => ${3:expression},
	${4:pattern} => ${5:expression},
	${VISUAL}${6:${VISUAL/(.*)/_/}} => ${0:expression},
}
endsnippet

snippet elif "else if ... (elif)"
else if ${1:condition} {
	${VISUAL}${2:${VISUAL/(.*)//}}
} ${0}
endsnippet

snippet "stru(ct?)?" "Struct [rust]" rAb

struct ${1:Point} {
    ${2:x}: ${3:i32},
    ${4:y}: ${5:i32},
}

endsnippet 

snippet print "Print [rust]" Ab
println!("${2:The value is: \{\}}", ${1:value});
endsnippet 

snippet let "Let mutable [rust]" Ab
let ${2:} ${1:VARIABLE_NAME}: i32 = 23;
endsnippet 

snippet enum "Enum [rust]" Ab

enum ${1:Message} {
    ${2:Quit},
    ${3:ChangeColor}: i32,
}

endsnippet 

snippet "((h(ash)?)?set)" "HashSet [rust]" r
let mut set: HashSet<${1:i32}> = HashSet::new();
endsnippet 

snippet "((h(ash)?)?map|dict)" "HashMap [rust]" r
let mut dictionary: HashMap<${1:i32}> = HashMap::new();
endsnippet 

snippet bmap "BTreeMap [rust]" 
let mut dictionary: BTreeMap<${1:i32}> = BTreeMap::new();
endsnippet 

snippet "deq(ue)?" "VecDeque [rust]" r
let mut deque: VecDeque<${1:i32}> = VecDeque::new();
endsnippet 

snippet "vec(t(or?)?)?" "Vector [rust]" r
let mut vector: Vec<${1:i32}> = Vec::new();
endsnippet 

snippet "(p?que(ue)?|heap)" "BinaryHeap [rust]" r
let mut queue: BinaryHeap<${1:i32}> = BinaryHeap::new();
endsnippet 

snippet "(l(i(n(k(ed?)?)?)?)?)?list" "LinkedList [rust]" r
let mut list: LinkedList<${1:i32}> = LinkedList::new();
endsnippet 

#snippet 
#endsnippet 
