extends cfamily

snippet main "The main method [java]"
public class Main {

  public static void main(String[] args) {
    ${1:// do stuff}
  }
}
endsnippet

snippet "walk|rglob" "Recursively walk a directory [java]" rb
public final Optional<Set<String>> walk(final String root) {
    try {
    return Optional.of(Files.walk(Paths.get(root)).parallel()
                   .map(Path::toString)
                   .collect(Collectors.toSet()));
    } catch (IOException e) {
    return Optional.empty();
    }
}
endsnippet 

snippet "curl|get|request" "HTTP GET request [java]" rb
private static Optional<List<String>> get(String url) {
    try {
    return Optional
        .of(new BufferedReader(new InputStreamReader(new URL(url)
                                     .openStream()))
                .lines().collect(Collectors.toList()));
    } catch (IOException e) {
    return Optional.empty();
    }
}
endsnippet 

snippet "to[sS]tr(ing)?" "toString() [java]" rb
@Override
public String toString() {
  return super.toString();
}
endsnippet

snippet collect "Collect [java]"
List<String> list = Arrays.stream(strArray).collect(Collectors.toList());
endsnippet 

snippet readFile "Read file [java]"
private List<String> readFile(String filename) {
    List<String> records = new ArrayList<String>();
    try {
        BufferedReader reader = new BufferedReader(new FileReader(filename));
        String line;
        while ((line = reader.readLine()) != null) {
            records.add(line);
        }
        reader.close();
        return records;
    } catch (Exception e) {
        System.err.format("Exception occurred trying to read '%s'.", filename);
        e.printStackTrace();
        return null;
    }
} 
endsnippet

snippet "fore(ach)?" "Foreach loop [java]" rb
for (${1:Object} ${2:i} : ${3:iterable}) {
    ${4:// do stuff}
}
endsnippet

snippet "echo|print|sysout" "Sysout [java]" r
System.out.println("${1:message}");
endsnippet

snippet queue "Queue [java]"
Queue<Integer> deque = new SynchronousQueue<Integer>();
endsnippet

snippet hmap "Hash map [java]"
Map<Integer> map = new HashMap<>();
endsnippet

snippet hset "Hash set [java]"
Set<Integer> set = new HashSet<>();
endsnippet

snippet tset "Tree set [java]"
Set<Integer> set = new TreeSet<>();
endsnippet

snippet heap "Heap (priority queue) [java]"
Queue<Integer> heap = new PriorityQueue<>();
endsnippet

snippet deque "Deque [java]"
Deque<Integer> deque = new ArrayDeque<>();
endsnippet

snippet "vec(t(or)?)?" "Vector [java]" r
Collection<Integer> vector = new Vector<>();
endsnippet

snippet stack "Stack [java]"
List<Integer> stack = new Stack<>();
endsnippet

snippet llist "Linked list [java]"
List<Object> list = new LinkedList<>();
endsnippet

snippet alist "Array list [java]"
List<Object> list = new ArrayList<>();
endsnippet

snippet "log(ger)?" "Logging [java]" r
final static Logger log = Logger.getLogger("${1:Main logger}");
log.setLevel(Level.${2:INFO});
endsnippet

snippet array "Array [java]"
${1:int}[] ${2:array} = new ${3:int}[${4:10}];
endsnippet

snippet try "Try, catch [java]"
try {
    ${1:// attempt}
} catch (Exception e) {
    ${2:// on failure}
}
endsnippet
