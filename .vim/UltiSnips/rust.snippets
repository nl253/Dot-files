snippet "whi(le?)?" "While loop [rust]" r 

while ${1:condition} {

}

endsnippet 

snippet use "Standard Library [rust]" 
use std::${1:};
endsnippet 

snippet "stru(ct?)?" "Struct [rust]" r

struct ${1:Point} {
    x: i32,
    y: i32,
}

endsnippet 

snippet "pr(i(nt?)?)?" "Print [rust]" r
println!("The value is: {}", ${1:value});
endsnippet 

snippet letm "Let mutable [rust]" 
let mut ${1:variable_name}: i32 = 23;
endsnippet 


snippet enum "Enum [rust]" 

enum ${1:Message} {
    Quit,
    ChangeColor(i32, i32, i32),
    Move { x: i32, y: i32 },
    Write(String),
}

endsnippet 

snippet "((h(ash)?)?set)" "HashSet [rust]" r
let mut set: HashSet<${1:i32}> = HashSet::new();
endsnippet 

snippet "((h(ash)?)?map|dict)" "HashMap [rust]" r
let mut dictionary: HashMap<${1:i32}> = HashMap::new();
endsnippet 

snippet bmap "BTreeMap [rust]" 
let mut dictionary: BTreeMap<${1:i32}> = BTreeMap::new();
endsnippet 

snippet "deq(ue)?" "VecDeque [rust]" r
let mut deque: VecDeque<${1:i32}> = VecDeque::new();
endsnippet 

snippet "vec(t(or?)?)?" "Vector [rust]" r
let mut vector: Vec<${1:i32}> = Vec::new();
endsnippet 

snippet "(p?que(ue)?|heap)" "BinaryHeap [rust]" r
let mut queue: BinaryHeap<${1:i32}> = BinaryHeap::new();
endsnippet 

snippet "(l(i(n(k(ed?)?)?)?)?)?list" "LinkedList [rust]" r
let mut list: LinkedList<${1:i32}> = LinkedList::new();
endsnippet 

#snippet 
#endsnippet 
