#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import shutil
import shlex
import os
import re
import logging
import subprocess
from typing import List
import json
import urllib.request

#      TODO
#   -----------------
#   1. dry-run
#   2. print (using tree), the structure of the project
#   3. [ ] logging
#   4. when using templates check if they exist and default to False if not
#   5. if a project with a name like that exists (check for it), then just open


def exists(option: str) -> str or List or False:
    try:
        eval(option)
        return True
    except (NameError, KeyError, ValueError):
        return False


def expand(string: str) -> str:
    return os.path.expandvars(os.path.expanduser(string))


def file_fetcher(source: str, output: str):
    source = source.strip()
    output = output.strip()
    output = expand(output)
    if not os.path.exists(output):
        os.mknod(output)
        if re.compile('^https?').search(source):
            logger.info('file_fetcher: URL detected: {}'.format(source))
            logger.info('file_fetcher: requesting and writing')
            open(output, 'w').write(urllib.request.urlopen(source).read().decode('utf-8'))
        else:
            if os.path.isfile(expand(source)):
                logger.info(
                    'file_fetcher: a valid file detected: {}'.format(source))
                logger.info('file_fetcher: copying')
                shutil.copy(expand(source), output)
            else:
                logger.info(
                    'file_fetcher: invalid path to file {}'.format(expand(source)))


def execute_handler():
    logger.info('execute_handler: Executing commands. {}'.format(execute))
    for i in user_configuration[args.language]['execute']:
        for e in execute:
            subprocess.run(shlex.split(e))


def dir_handler():
    logger.info('dir_handler: making dirs. {}'.format(user_configuration[args.language]['dirs']))
    for d in user_configuration[args.language]['dirs']:
        os.mkdir(d)


def files_handler():
    logger.info('files_handler: making files. {}'.format(user_configuration[args.language]['files']))
    for f in user_configuration[args.language]['files']:
        os.mknod(f)


def fetch_handler():
    for i in user_configuration[args.language]['fetch']:
        file_fetcher(user_configuration[args.language]['fetch'][i], i)


logger = logging.getLogger()

if not os.path.exists(expand('~/.projectrc.json')):
    os.mknod(expand("~/.projectrc.json"))
    open(expand("~/.projectrc.json"), "w").write(urllib.request.urlopen("https://raw.githubusercontent.com/nl253/ProjectGenerator/master/defaults.json").read().decode("utf-8"))

user_configuration = json.load(open(expand('~/.projectrc.json')))

assert os.path.exists(expand("~/.projectrc.json")), "Config file not detected, downloading must have failed."

parser = argparse.ArgumentParser(
    prog="project",
    description="\nAutomate new projects creation using sane defaults.\n",
    epilog="\nThanks for using the software.\n")

parser.add_argument(
    "-v",
    "--verbosity",
    help="increase output verbosity",
    action="count")

parser.add_argument(
    "language",
    help="The language you want to work with.",
    choices=[language for language in user_configuration if language != "default"])

parser.add_argument(
    'name',
    help="Project name.")

args = parser.parse_args()

logging.basicConfig(
    filename='pylog.log',
    level=logging.INFO, format='%(levelname)s:%(asctime)s  %(message)s')

assert user_configuration['default']['location'], 'location provided is None'

location = expand(user_configuration['default']['location'])

logger.info('making sure projects root location {} is exists'.format(location))

if not os.path.exists(location):
    logger.info('creating root location {} is exists'.format(location))
    os.mkdir(location)

logger.info('Storing items in variables and checking the content.')

logger.info('Project language is {}'.format(args.language))

logger.info('Project name is {}'.format(args.name))

dirs = list(map(expand, user_configuration[args.language]['dirs']))

logger.info('Project dirs is {}'.format(dirs))

files = list(map(expand, user_configuration[args.language]['files']))

logger.info('Project files is {}'.format(files))

execute = list(map(expand, user_configuration[args.language]['execute']))

logger.info('List of commands to execute is {}'.format(execute))

logger.info('Changing dir to : {}'.format(location))

assert not os.path.exists(os.path.join(location, args.name.strip())), "Supplied project already exists"

os.mkdir(os.path.join(location, args.name.strip()))

os.chdir(os.path.join(location, args.name.strip()))

logger.info('CWD : {}'.format(os.path.abspath(os.curdir)))

def main():
    dir_handler()
    files_handler()
    fetch_handler()
    execute_handler()


if __name__ == '__main__':
    main()
