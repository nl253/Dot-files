#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import logging
import subprocess
import re

# emails conflict with dot ending of sentences
# restrict even more
# support gentle table formatting
# more typos formatting
# support date and time formatting
# protect source code
# make more modular

logging.basicConfig(
    level=logging.DEBUG,
    filename='formatter.log',
    format='%(levelname)s:%(asctime)s  %(message)s')

logger = logging.getLogger()

class Formatter:
    def __init__(self, source=sys.stdin):
        self._doc = source.read()
        if len(self._doc) < 1:
            logger.error('Formatter: __init__(): Length of doc is 0')
            subprocess.run([sys.argv[0], '--help'])
            sys.exit()
        logger.info(self._doc)
        logger.info('type: ' + str(type(self._doc)))
        logger.info('len: ' + str(len(self._doc)))
        self._mode = self.__detect_mode()

    def __detect_mode(self):
        if re.compile(
            '^[ \t]*`{2,3} *\w+\S*$',
            flags=re.DOTALL | re.MULTILINE).search(self._doc):
            # detect source code to avoid breaking the synatx
            return 'sourcecode'
            logger.info('self._mode is sourcecode')
        elif not re.compile('^ *[-*+1-9#] *', flags=re.MULTILINE).search(self._doc):
        # paragraphs do not include bulletpoints
        # separate lists from the paragraph (insert a newline), then wrap paragraph, smart wrap lists
            return 'aggressive'
            logger.info('self._mode is paragraph')
        elif re.compile(
            '(^[ \t]*[-1-9*+#]\.?[ \t]*[\w[(\[\'“”`’‘"]+)+',
            flags=re.DOTALL | re.MULTILINE).search(self._doc):
            # at least one bulletpoint (starting with [-+*]) with a length of at most 300 characters
            # wrap smartly using the position of the first `\w` character after a bullet point `[-+*]`
            # indent using 8 spaces
            return 'gentle'
            logger.info('self._mode is gentle')
        else:
            # fallback, make sure this is safe and doesn't harm lists or codeblocks
            return 'gentle'
            logger.info('self._mode is gentle')


    def emails(self):
        logger.info('Formatter: emails')
        # emails anne @ soooo.com to anne@soooo
        self._doc = re.compile('(?<=\w{2}) *@ *(?=[A-Za-z]{2,} *\. *\w+)'). sub('@', self._doc)
        # self._doc = re.compile('(?<=\w{2}@A-Za-z]{2} *\. *\w+)'). sub('@', self._doc)

    def math(self):
        logger.info('Formatter: math')
        self._doc = re.compile(
            '(?<=\d)( *)\*( *)(?=(\d))', flags=re.ASCII).sub(' • ', self._doc)
        self._doc = re.compile(
            '(?<=\d)( *)\/( *)(?=\d)', flags=re.ASCII).sub(' ÷ ', self._doc)
        self._doc = re.compile(
            '(?<=\d)( *)-( *)(?=\d)', flags=re.ASCII).sub(' - ', self._doc)
        self._doc = re.compile(
            '(?<=\d)( *)\+( *)(?=\d)', flags=re.ASCII).sub(' + ', self._doc)
        self._doc = re.compile(
            '(?<=\d)( *)\=( *)(?=\d)', flags=re.ASCII).sub(' = ', self._doc)
        self._doc = re.compile(
            '(?<=\d)( *)>( *)(?=\d)', flags=re.ASCII).sub(' > ', self._doc)
        self._doc = re.compile(
            '(?<=\d)( *)<( *)(?=\d)', flags=re.ASCII).sub(' < ', self._doc)
        # PI to π
        self._doc = re.compile('(?<=[-+*% =0-9()/]) *PI *').sub(' π ', self._doc)
        self._doc = re.compile('(?<=\d) +degrees *').sub('° ', self._doc)
        self._doc = re.compile('(?<=[-+*% =0-9()/]) *theta *').sub('θ ', self._doc)
        self._doc = re.compile('(?<=[-+*% =0-9()/]) *Delta *').sub('Δ ', self._doc)
        self._doc = re.compile('(?<=[-+*% =0-9()/]) *delta *').sub('δ ', self._doc)
        self._doc = re.compile('(?<=[-+*% =0-9()/]) *phi *').sub('φ ', self._doc)
        self._doc = re.compile('(?<=[-+*% =0-9()/]) *Phi *').sub('Φ ', self._doc)
        self._doc = re.compile('(?<=[-+*% =0-9()/]) *[lL]ambda *').sub('λ ', self._doc)

    def punctuation(self):
        logger.info('Formatter: punctuation')
    def paragraphs(self):
        logger.info('Formatter: paragraphs')
        # max 2 newlines at the time, avoids massive gaps in self._doc
        self._doc = re.compile('\n{3,}').sub('\n\n', self._doc)
    def delimiters(self):
        logger.info('Formatter: delimiters')
    def sentence_endings(self):
        logger.info('Formatter: sentence_endings')
    def typos(self):
        logger.info('Formatter: typos')
    def date(self):
        logger.info('Formatter: date')
        months = ('january', 'februrary', 'march',
             'april', 'may', 'june', 'august',
             'september', 'october', 'november', 'december')
        weekdays = ('monday', 'tuesday',
             'wednesday', 'thursday', 'friday',
             'saturday', 'sunday')
        for i in weekdays + months:
            self._doc.replace(i, i.capitalize())

    def whitespace(self):
        logger.info('Formatter: whitespace')

    def lists(self):
        logger.info('Formatter: lists')

    def aggressive(self):
        logger.info('Formatter: aggressive')

    def all(self):
        logger.info('Formatter: all')






