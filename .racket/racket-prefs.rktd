(
 (readline-input-history
  (
   #"(app-path \"me\" \"note\")"
   #"(define app-path \n    (lambda xs \n      (path->string \n        (foldr (lambda (x y) (path->string (build-path x y))) \n               (path->string (expand-user-path \"~\"))\n               (list* app-dir xs)))))"
   #"(define app-path \n    (lambda xs \n      (path->string \n        (foldl (lambda (x y) (path->string (build-path x y))) \n               \"~\" \n               (list* app-dir xs)))))"
   #"(define app-path \n    (lambda xs \n      (path->string \n        (build-path \n          (list* (getenv \"HOME\") app-dir xs)))))"
   #"(define app-dir \".notes-app\")"
   #"x"
   #"(x)"
   #"(define x 22)"
   #"(path->string (build-path \"abc\" \"def\"))"
   #"(build-path \"abc\" \"def\")"
   #"(getenv \"HOME\")"
   #"(environment-variables-ref (current-environment-variables) \"HOME\")"
   #"(current-environment-variables)"
   #"(case (random 0 3) [(0) (displayln \"it was a zero\")] [(1) 1])"
   #"(random 0 3)"
   #"(random 0 10)"
   #"(random 0 10 )"
   #"(random 10)"
   #"(define say (case-lambda \n                [('nice) \"You said nice!\"]\n                [('hello) \"Hello!\"]))"
   #"(say 'nice)"
   #"(define say (case-lambda \n                ['nice \"You said nice!\"]\n                ['hello \"Hello!\"]))"
   #"(avg 1 2 1291 23 123 12 3 1 2)"
   #"(avg 1 2 1291 23 123 12 3 1)"
   #"(avg 1 2 1291 23 123 12 3 12)"
   #"(avg 1 2 1291 23 123 12 3)"
   #"(avg 1 2 1291 23 123)"
   #"(define avg (lambda (x y . rest) \n    (/ (foldl + 0 (list* x y rest))\n       (+ 2 (length rest)))))"
   #"((lambda (x y . rest) \n    (/ (foldl + 0 (list* x y rest))\n       (+ 2 (length rest)))) 1 2 300 212 3),bt"
   #"((lambda (x y . rest) \n    (/ (foldl + 0 (list* x y rest))\n       (+ 2 (length rest)))) 1 2 300 212 3)"
   #"(lambda (x y . rest) \n    (/ (foldl + 0 (list* x y rest))\n       (+ 2 (length rest))))"
   #"((lambda (fst . rest) \n    rest) 20)"
   #"(lambda (fst . rest) \n    rest)"
   #"((lambda (x y . rest) (/ (foldl + 0 (cons x (cons y rest)))) (+ 2 (length rest))) 1 2 3 4 5 100)"
   #"((lambda (x y . rest) (/ (foldl + 0 (cons x (cons y rest)))) (+ 2 (length rest))) 1 2 3 4 5)"
   #"(lambda (x y . rest) (/ (foldl + 0 (cons x (cons y rest)))) (+ 2 (length rest)))"
   #"(lambda (x y . rest) (/ (foldl + 0 (cons x (cons y rest)))))"
   #"(lambda (x y . rest) (/ (foldl + 0 (cons x (cons y rest))))\n  )"
   #"((lambda (x y . rest) (foldl + 0  (cons x (cons y rest)))) 1 2 3)"
   #"((lambda (x y . rest) (foldl + (cons x (cons y rest)))) 1 2 3)"
   #"(lambda (x y . rest) (foldl + (cons x (cons y rest))))"
   #"(define avg (x y . rest) (foldl + (cons x (cons y rest))))"
   #"(define avg (x y . rest) (foldl + (cons x (cons y rest)))\n  )"
   #"(define avg (x y . rest) (cons x (cons y rest)))"
   #"(apply + '(1 2 3))"
   #"((lambda xs xs) 1 2 3)"
   #"((lambda xs (xs)) 1 2 3)"
   #"((lambda avg xs (xs)) 1 2 3)"
   #"((lambda avg xs xs) 1 2 3)"
   #"(lambda avg xs xs)"
   #"'()"
   #"()"
   #"(10 . (10 . (empty)))"
   #"empty"
   #"(10 . (10 . empty))"
   #"(10 . (10 . '()))"
   #"(10 . 10 . '())"
   #"(car (10 . 10 . '()))"
   #"'(10 . 10 . '())"
   #"(10 . 10)"
   #"#(1 2)"
   #"#vu8(1 2)"
   #"#vu8(1 2 )"
   #"22"
   #"(#vu8(1 2 ))"
   #"#u8(1 2 )"
   #"#uv(1 2 )"
   #"(rest '(1 2 3)\n  )"
   #"(cdr (list 1 2 3))"
  ))
)
