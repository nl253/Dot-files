# vim: ft=cfg
#
# This is the configuration file of "rifle", ranger's file executor/opener.
# Each line consists of conditions and a command.  For each line the conditions
# are checked and if they are met, the respective command is run.
#
# Syntax:
#   <condition1> , <condition2> , ... = command
#
# The command can contain these environment variables:
#   $1-$9 | The n-th selected file
#   $@    | All selected files
#
# If you use the special command "ask", rifle will ask you what program to run.
#
# Prefixing a condition with "!" will negate its result.
# These conditions are currently supported:
#   match <regexp> | The regexp matches $1
#   ext <regexp>   | The regexp matches the extension of $1
#   mime <regexp>  | The regexp matches the mime type of $1
#   name <regexp>  | The regexp matches the basename of $1
#   path <regexp>  | The regexp matches the absolute path of $1
#   has <program>  | The program is installed (i.e. located in $PATH)
#   env <variable> | The environment variable "variable" is non-empty
#   file           | $1 is a file
#   directory      | $1 is a directory
#   number <n>     | change the number of this command to n
#   terminal       | stdin, stderr and stdout are connected to a terminal
#   X              | $DISPLAY is not empty (i.e. Xorg runs)
#
# There are also pseudo-conditions which have a "side effect":
#   flag <flags>  | Change how the program is run. See below.
#   label <label> | Assign a label or name to the command so it can
#                 | be started with :open_with <label> in ranger
#                 | or `rifle -p <label>` in the standalone executable.
#   else          | Always true.
#
# Flags are single characters which slightly transform the command:
#   f | Fork the program, make it run in the background.
#     |   New command = setsid $command >& /dev/null &
#   r | Execute the command with root permissions
#     |   New command = sudo $command
#   t | Run the program in a new terminal.  If $TERMCMD is not defined,
#     | rifle will attempt to extract it from $TERM.
#     |   New command = $TERMCMD -e $command
# Note: The "New command" serves only as an illustration, the exact
# implementation may differ.
# Note: When using rifle in ranger, there is an additional flag "c" for
# only running the current file even if you have marked multiple files.

#-------------------------------------------
# Jupyter Notebooks
#-------------------------------------------
ext ipynb, has jupyter = jupyter nbconvert --to python --stdout "$@" 2>/dev/null | $EDITOR -c 'set filetype=python tabstop=4 shiftwidth=4 formatoptions=cqjonl1 complete-=k expandtab foldmethod=expr' -

#-------------------------------------------
# Archives
#-------------------------------------------
ext tar.gz = tar xfz $1
ext tar.bz2 = tar xfj $1
ext tar.xz = tar xfJ $1
ext cab|7z|zip|tar|gz|arj|bz2|rpm|deb|cpio, has 7z = 7z -o"$(echo $1 | sed -Ee 's/\.\w+$//g')" x "${1}" &>/dev/null &

ext [tj]ar|[gx]z|lz(ma)?|Z|z(st|ip), has nvim = nvim "$@"
ext [tj]ar|[gx]z|lz(ma)?|Z|z(st|ip), = vim "$@"

#-------------------------------------------
# PDF
#-------------------------------------------
ext pdf, has evince, flag f = evince -- "$@"
ext pdf, has firefox, flag f = firefox -- "$@"

#-------------------------------------------
# Compiled *.class files
#-------------------------------------------
ext class, has javap = javap "$@" | $EDITOR -c 'set filetype=java tabstop=4 shiftwidth=4 expandtab foldmethod=marker' -

#-------------------------------------------
# Database
#-------------------------------------------
ext sqlite.*, has sqlite3 = sqlite3 "$@"

#-------------------------------------------
# Pager
#-------------------------------------------
# comma and tab separated values
ext csv = cat $@ | column --separator , --table --output-width $(tput lines) --output-separator '  ' 2>/dev/null | less -RXI

#-------------------------------------------
# PPT
#-------------------------------------------
ext pptx?|od[dfgpst]|docx?|sxc|xlsx?|, has libreoffice, flag f = libreoffice "$@"
# ext docx?, has catdoc,       terminal = catdoc -- "$@" | "$PAGER"

#-------------------------------------------
# Image Viewing:
#-------------------------------------------
mime ^(image)|application/x-xcf, has gimp, flag f = gimp -- "$@"

# man pages
ext 1 = man "$1" 

#-------------------------------------------
# Text files 
#-------------------------------------------
ext m(ark)?d(own)?|txt|j(ava|s(on)?)|x?(ht)?ml|[jt]s|z?sh|py|vim|r(st?|b)|c(fg|onf(ig)?)|p?css|ini|ya?ml|(p|tom)l|tex|php|a(scii)?doc = $EDITOR -- "$@"

# all other - open in $EDITOR if not junk
file, label editor, !name ^tags$|bookma|te?mp|history|cache|\.(log|swp|(ba|loc)k|py[oc]|te?mp|aux|toc|class|o(bj)?|so)$ = $EDITOR -- "$@" 

# #--------------------------------------------
# # Audio
# #-------------------------------------------
# mime ^audio|ogg$, terminal, has mpv      = mpv -- "$@"
# mime ^audio|ogg$, terminal, has mplayer  = mplayer -- "$@"
# mime ^audio|ogg$, terminal, has mplayer2 = mplayer2 -- "$@"

# #--------------------------------------------
# # Video/Audio
# #-------------------------------------------
# mime ^video,       has mpv,      flag f = mpv -- "$@"
# mime ^video,       has mpv,      flag f = mpv --fs -- "$@"
# mime ^video|audio, has vlc,      flag f = vlc -- "$@"
# mime ^video,       has mplayer2, flag f = mplayer2 -- "$@"
# mime ^video,       has mplayer2, flag f = mplayer2 -fs -- "$@"

# #--------------------------------------------
# # Video without X:
# #-------------------------------------------
# mime ^video, terminal, has mpv       = mpv -- "$@"
# mime ^video, terminal, has mplayer2  = mplayer2 -- "$@"
# mime ^video, terminal, has mplayer   = mplayer -- "$@"

#-------------------------------------------
# Ultimate Fallback
#-------------------------------------------
label pager = $PAGER -XIR $@
name .* = ask
