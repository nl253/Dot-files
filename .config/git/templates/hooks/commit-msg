#!/usr/bin/env bash

## Perform checks on commit msg.  See if it adheres to standards.

# git-journal parses commit msgs and checks for presence of 
# keywords such as 'modify', 'update', 'deprecate'.
# See <https://github.com/saschagrunert/git-journal>.
# Use git-joural only if availible.
# XXX TOO BUGGY TO USE
# if [[ -x ~/.cargo/bin/git-journal ]] || [[ -x /usr/bin/git-journal ]]; then
  # command git-journal verify $1
# fi

if [[ ! $BASH_VERSION =~ ^[45] ]]; then
  builtin echo "Your bash(1) is out of date. Install bash 4 or 5 to and re-run this script."
  builtin exit 0
fi

_fmt_error() {
  command cat <<EOF
$(command tput setaf 1)[ERROR] $*$(command tput sgr0).
EOF
}

# Check for necessary executables
for i in mktemp fmt sed grep cat; do
  if [[ ! -x $(builtin type -P $i) ]]; then
    _fmt_error "$i is not installed, cannot validate the commit message"
    exit 0 # don't prevent committing
  fi
done

# To prevent unexpected behaviour, the script is to be run with Bash 4.
if [[ ! $BASH_VERSION =~ ^4 ]]; then
  _fmt_error "your bash(1) is outdated, cannot validate the commit message."
  exit 0 # don't prevent committing
fi

_fmt_heading() {
  command cat <<EOF
$(command tput bold)$(command tput setaf 3)$*$(command tput sgr0)
EOF
}

commit_msg_file=$1

subject_line() { command head -n 1 $commit_msg_file; }

line_count() { command cat $commit_msg_file | command grep --count .; }

second_line() { command head -n 2 $commit_msg_file; }

# the main message
message() {
  command sed -n "2,$(command grep --count $commit_msg_file)p" $commit_msg_file
}

error_msg() {
  command cat <<EOF
$(_fmt_error "The commit message does not adhere to git style guide.")

$(_fmt_heading "THE RULES")

- the summary line should be descriptive yet succinct (max 50 characters)
- use imperative, present tense
- capitalize the subject 
- use printable characters
- don't use fullstops (periods) at the end (it's a title and not a sentence)

For details see <https://github.com/agis/git-style-guide#messages>

$(_fmt_heading "THE MESSAGE ")

"$(command cat "$commit_msg_file" | command grep -Ev '^#')"

$(_fmt_heading "ISSUE")
>> ${1}.

$(command tput bold)Please fix it before re-comitting.$(command tput sgr0)
EOF
}

# CHECK SUBJECT LINE
if [[ $(subject_line) =~ ^[[:space:]]+ ]]; then
  error_msg "Leading spaces in the subject" && exit 1
elif [[ $(subject_line) =~ ^[a-z] ]]; then
  error_msg "Uncapitalised subject" && exit 1
elif [[ ! $(subject_line) =~ ^[[:print:][:space:]]+$ ]]; then
  error_msg "Use of unprintable characters" && exit 1
elif [[ $(subject_line) =~ [[:alpha:]]{3,}ed[[:space:]] ]]; then
  error_msg "Possible use of past tense" && exit 1
elif [[ $(subject_line) =~ \.$ ]]; then
  error_msg "The subject ends with a fullstop (period)" && exit 1
elif [[ $(subject_line) =~ .{51,} ]]; then
  error_msg "The subject is too long - max is 50 chars" && exit 1
elif [[ $(subject_line) =~ \\t ]]; then
  error_msg "Use of the tab character \\t" && exit 1
elif [[ $(subject_line) =~ \ +$ ]]; then
  error_msg "Trailing spaces" && exit 1
fi

# CHECK MESSAGE BODY
if (($(line_count) > 1)); then

  # if more than just the subject, check for blank line
  if [[ ! $(second_line) =~ [[:space:]]* ]]; then
    error_msg "The second line needs to be blank" && exit 1
  elif [[ $(message) =~ ^[[:space:]]+ ]]; then
    error_msg "Leading spaces in the message body" && exit 1
  elif [[ $(message) =~ [[:alpha:]]{3,}ed([[:space:][:punct:]]|$) ]]; then
    error_msg "Possible use of past tense" && exit 1
  fi

  # All lines must be shorter than 80 chars
  for i in $(message); do
    if [[ $i =~ .{81} ]]; then
      error_msg "Over 80 characters on line:\n'$i'" && exit 1
    fi
  done
fi

# ------------------------------------------------------------------------
tmp_file=$(command mktemp)
command cat $commit_msg_file | command grep -E -v '^#' | command fmt --uniform-spacing > $tmp_file
command cat $tmp_file > $commit_msg_file
