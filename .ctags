--recurse=no
--tag-relative=yes

--exclude=**.cpp
--exclude=*.css
--exclude=*.js
--exclude=*.c

--exclude=**.emacs.d**
--exclude=.multirust**
--exclude=.zplug**
--exclude=Dump**
--exclude=**anaconda**
--exclude=**conda**
--exclude=**google**
--exclude=**pyenv**
--exclude=**site/
--exclude=**vim/backup**
--exclude=**vim/swap**
--exclude=**vim/undo**
--exclude=*PyCharm2017*
--exclude=.adobe/**
--exclude=.alacritty/**
--exclude=.bluej/**
--exclude=.cabal/**
--exclude=.cache/**
--exclude=.cargo/**
--exclude=.config/**
--exclude=.dropbox/**
--exclude=.fonts/**
--exclude=.fzf/**
--exclude=.gem/**
--exclude=.ghc/**
--exclude=.git/**
--exclude=.gnome/**
--exclude=.httpie/**
--exclude=.icons/**
--exclude=.ipython/**
--exclude=.irssi/**
--exclude=.local/**
--exclude=.proselint/**
--exclude=.rustup/**
--exclude=.steam/*
--exclude=.tmux/**
--exclude=.vim/colors/**
--exclude=.vim/plugged/**
--exclude=Dropbox/**
--exclude=OneDrive/**
--exclude=nltk_data/**
--exclude=node_modules/**

--regex-perl=/with\s+([^;]+)\s*?;/\1/w,role,roles/
--regex-perl=/extends\s+['"]([^'"]+)['"]\s*?;/\1/e,extends/
--regex-perl=/use\s+base\s+['"]([^'"]+)['"]\s*?;/\1/e,extends/
--regex-perl=/use\s+parent\s+['"]([^'"]+)['"]\s*?;/\1/e,extends/
--regex-perl=/Mojo::Base\s+['"]([^'"]+)['"]\s*?;/\1/e,extends/
--regex-perl=/^\s*?use\s+([^;]+)\s*?;/\1/u,use,uses/
--regex-perl=/^\s*?require\s+((\w|\:)+)/\1/r,require,requires/
--regex-perl=/^\s*?has\s+['"]?(\w+)['"]?/\1/a,attribute,attributes/
--regex-perl=/^\s*?\*(\w+)\s*?=/\1/a,alias,aliases/
--regex-perl=/->helper\(\s?['"]?(\w+)['"]?/\1/h,helper,helpers/
--regex-perl=/^\s*?our\s*?[\$@%](\w+)/\1/o,our,ours/
--regex-perl=/^\=head1\s+(.+)/\1/p,pod,Plain Old Documentation/
--regex-perl=/^\=head2\s+(.+)/-- \1/p,pod,Plain Old Documentation/
--regex-perl=/^\=head[3-5]\s+(.+)/---- \1/p,pod,Plain Old Documentation/
--recurse=yes
--langmap=perl:+.pod

--langdef=css
--langmap=css:.css
--regex-css=/^[[:space:]]*([A-Za-z0-9#-_[:space:]]+)\{/\1/,selector/

--langdef=sass
--langmap=sass:.scss
--regex-sass=/^[[:space:]]*([A-Za-z0-9#-_[:space:]]+)\{/\1/,selector/

--langdef=Go
--langmap=Go:.go
--regex-Go=/func([ \t]+\([^)]+\))?[ \t]+([a-zA-Z0-9_]+)/\2/d,func/
--regex-Go=/var[ \t]+([a-zA-Z_][a-zA-Z0-9_]+)/\1/d,var/
--regex-Go=/type[ \t]+([a-zA-Z_][a-zA-Z0-9_]+)/\1/d,type/

--langdef=coffee
--langmap=coffee:.coffee
--regex-coffee=/(^|=[ \t])*class ([A-Za-z]+\.)*([A-Za-z]+)( extends [A-Za-z.]+)?$/\3/c,class/
--regex-coffee=/^[ \t]*(module\.)?(exports\.)?@?([A-Za-z._]+):.*[-=]>.*$/\3/m,method/
--regex-coffee=/^[ \t]*(module\.)?(exports\.)?([A-Za-z._]+)[ \t]+=.*[-=]>.*$/\3/f,function/
--regex-coffee=/^[ \t]*([A-Za-z._]+)[ \t]+=[^->\n]*$/\1/v,variable/
--regex-coffee=/^[ \t]*@([A-Za-z._]+)[ \t]+=[^->\n]*$/\1/f,field/
--regex-coffee=/^[ \t]*@([A-Za-z._]+):[^->\n]*$/\1/f,static field/
--regex-coffee=/^[ \t]*([A-Za-z._]+):[^->\n]*$/\1/f,field/
--regex-coffee=/(constructor: \()@([A-Za-z.]+)/\2/f,field/
--regex-coffee=/(constructor: \()@[A-Za-z.]+(, @([A-Za-z.]+)){0}/\3/f,field/
--regex-coffee=/(constructor: \()@[A-Za-z.]+(, @([A-Za-z.]+)){1}/\3/f,field/
--regex-coffee=/(constructor: \()@[A-Za-z.]+(, @([A-Za-z.]+)){2}/\3/f,field/
--regex-coffee=/(constructor: \()@[A-Za-z.]+(, @([A-Za-z.]+)){3}/\3/f,field/
--regex-coffee=/(constructor: \()@[A-Za-z.]+(, @([A-Za-z.]+)){4}/\3/f,field/
--regex-coffee=/(constructor: \()@[A-Za-z.]+(, @([A-Za-z.]+)){5}/\3/f,field/
--regex-coffee=/(constructor: \()@[A-Za-z.]+(, @([A-Za-z.]+)){6}/\3/f,field/
--regex-coffee=/(constructor: \()@[A-Za-z.]+(, @([A-Za-z.]+)){7}/\3/f,field/
--regex-coffee=/(constructor: \()@[A-Za-z.]+(, @([A-Za-z.]+)){8}/\3/f,field/
--regex-coffee=/(constructor: \()@[A-Za-z.]+(, @([A-Za-z.]+)){9}/\3/f,field/

--exclude=node_modules/*

--regex-javascript=/function[ \t]+([A-Za-z0-9._$]+)/\1/,function/
--regex-javascript=/([A-Za-z0-9._$]+)[ \t]*[:=][ \t]*\{/\1/,object/
--regex-javascript=/([A-Za-z0-9._$()]+)[ \t]*[:=][ \t]*function[ \t]*\(/\1/,function/
--regex-javascript=/function[ \t]+([A-Za-z0-9._$]+)[ \t]*\(([^)])\)/\1/,function/
--regex-javascript=/([A-Za-z0-9._$]+)[ \t]*[:=][ \t]*\[/\1/,array/
--regex-javascript=/([^= ]+)[ \t]*=[ \t]*[^"]'[^']*/\1/,string/
--regex-javascript=/([^= ]+)[ \t]*=[ \t]*[^']"[^"]*/\1/,string/
--regex-javascript=/^[ \t]*var[ \t]*([A-za-z]+)*[ \t]*=[ \t]*React\.createClass/\1/c,class/

--langdef=latex
--langmap=latex:.tex
--regex-latex=/^\\tableofcontents/TABLE OF CONTENTS/s,toc/
--regex-latex=/^\\frontmatter/FRONTMATTER/s,frontmatter/
--regex-latex=/^\\mainmatter/MAINMATTER/s,mainmatter/
--regex-latex=/^\\backmatter/BACKMATTER/s,backmatter/
--regex-latex=/^\\bibliography\{/BIBLIOGRAPHY/s,bibliography/
--regex-latex=/^\\part[[:space:]]*(\[[^]]*\])?[[:space:]]*\{([^}]+)\}/PART \2/s,part/
--regex-latex=/^\\part[[:space:]]*\*[[:space:]]*\{([^}]+)\}/PART \1/s,part/
--regex-latex=/^\\chapter[[:space:]]*(\[[^]]*\])?[[:space:]]*\{([^}]+)\}/CHAP \2/s,chapter/
--regex-latex=/^\\chapter[[:space:]]*\*[[:space:]]*\{([^}]+)\}/CHAP \1/s,chapter/
--regex-latex=/^\\section[[:space:]]*(\[[^]]*\])?[[:space:]]*\{([^}]+)\}/\. \2/s,section/
--regex-latex=/^\\section[[:space:]]*\*[[:space:]]*\{([^}]+)\}/\. \1/s,section/
--regex-latex=/^\\subsection[[:space:]]*(\[[^]]*\])?[[:space:]]*\{([^}]+)\}/\.\. \2/s,subsection/
--regex-latex=/^\\subsection[[:space:]]*\*[[:space:]]*\{([^}]+)\}/\.\. \1/s,subsection/
--regex-latex=/^\\subsubsection[[:space:]]*(\[[^]]*\])?[[:space:]]*\{([^}]+)\}/\.\.\. \2/s,subsubsection/
--regex-latex=/^\\subsubsection[[:space:]]*\*[[:space:]]*\{([^}]+)\}/\.\.\. \1/s,subsubsection/
--regex-latex=/^\\includegraphics[[:space:]]*(\[[^]]*\])?[[:space:]]*(\[[^]]*\])?[[:space:]]*\{([^}]+)\}/\3/g,graphic+listing/
--regex-latex=/^\\lstinputlisting[[:space:]]*(\[[^]]*\])?[[:space:]]*(\[[^]]*\])?[[:space:]]*\{([^}]+)\}/\3/g,graphic+listing/
--regex-latex=/\\label[[:space:]]*\{([^}]+)\}/\1/l,label/
--regex-latex=/\\ref[[:space:]]*\{([^}]+)\}/\1/r,ref/
--regex-latex=/\\pageref[[:space:]]*\{([^}]+)\}/\1/p,pageref/

--langdef=Elm
--langmap=Elm:.elm
--regex-Elm=/^ *([[:lower:]][[:alnum:]_]+)[[:blank:]]*:[^:].*->.*/\1/f,function,functions/
--regex-Elm=/^ *([[:lower:]][[:alnum:]_]+)[[:blank:]]*:[^:][^-]+$/\1/c,constant,constants/
--regex-Elm=/^port +([[:lower:]][[:alnum:]_]+)[[:blank:]]*:[^:]/\1/p,port,ports/
--regex-Elm=/^type +([[:upper:]][[:alnum:]_]+)/\1/t,type,types/
--regex-Elm=/^type[[:blank:]]+alias[[:blank:]]+([[:upper:]][[:alnum:]_]+)/\1/a,type-alias,type-aliases/

--langdef=markdown 
--langmap=markdown:.md

--regex-markdown=/^[ \t]*#+[ \t]*([-() \/'\ta-zA-Z0-9,;_?!\.`:;]{2,78}?)/\1 - heading [markdown]/

--langdef=mediawiki 
--langmap=mediawiki:.wiki
--regex-mediawiki=/^[ \t]*=+[ \t]*([-() \/'\ta-zA-Z0-9,;_?!\.`:;]{2,78}?)[ \t]*=+/\1 - heading [mediawiki]/

--langdef=vorg 
--langmap=vorg:.vorg

--regex-vorg=/[^\w]#([A-Z]+)/\1 - hashtag [vorg]/

--regex-vorg=/( {4}|\t)*=> (.+)/\2 - defition [vorg]/

--regex-vorg=/( {4}|\t)*(>|\(){1,6} (.+)/\3 - heading [vorg]/

--langdef=rst
--langmap=rst:.rst

--regex-rst=/^[ \t]*\.{2} ([-a-z_]+):: (.{2,78}?)$/\2 - \1 [rst]/

--regex-rst=/^[ \t]*((\w+ ?)+):$/\1 - list [rst]/

--regex-rst=/^[ \t]*((\w+ ?)+)::$/\1 - paragraph [rst]/

--regex-rst=/^[ \t]*([A-Z]?[a-z]+)$/\1 [rst]/
--regex-rst=/^[ \t]*([A-Z]?[a-z]+) : (.*)$/\1: \2 - defintion [rst]/
--regex-rst=/^[ \t]*([A-Z]?[a-z]+) : (.*) : (.*)$/\1: \2: \3 - defintion [rst]/

--regex-rst=/^\.{2} _(.*): .*$/\1 - external hyperlink [rst]/

--regex-rst=/`((.*) )?<?(.*)>?`_{1,2}/\1 - hyperlink [rst]/

--regex-rst=/_`(.*)`/\1 - inline internal reference [rst]/

--regex-rst=/__ (\S+)/\1 - anonymous hyperlink [rst]/

--regex-rst=/<a href=["'](.*)["']>(.*)<\/a>/\2 - html embedded hyperlink [rst]/

--regex-rst=/(\w+)_{1,2}/\1 - anonymous inline reference [rst]/

--langdef=Rust
--langmap=rust:.rs
--regex-Rust=/^[ \t]*(#\[[^\]]\][ \t]*)*(pub[ \t]+)?(extern[ \t]+)?("[^"]+"[ \t]+)?(unsafe[ \t]+)?fn[ \t]+([a-zA-Z0-9_]+)/\6/f,functions,function definitions/
--regex-Rust=/^[ \t]*(pub[ \t]+)?(static|const)[ \t]+(mut[ \t]+)?([a-zA-Z0-9_]+)/\4/c,consts,static constants/
--regex-Rust=/^[ \t]*(pub[ \t]+)?(unsafe[ \t]+)?impl([ \t\n]*<[^>]*>)?[ \t]+(([a-zA-Z0-9_:]+)[ \t]*(<[^>]*>)?[ \t]+(for)[ \t]+)?([a-zA-Z0-9_]+)/\5 \7 \8/i,impls,trait implementations/
--regex-Rust=/^[ \t]*(pub[ \t]+)?(unsafe[ \t]+)?trait[ \t]+([a-zA-Z0-9_]+)/\3/t,traits,traits/
--regex-Rust=/^[ \t]*(pub[ \t]+)?enum[ \t]+([a-zA-Z0-9_]+)/\2/g,enum,enumeration names/
--regex-Rust=/^[ \t]*(pub[ \t]+)?impl([ \t\n]+<.*>)?[ \t]+([a-zA-Z0-9_]+)/\3/i,impls,trait implementations/
--regex-Rust=/^[ \t]*(pub[ \t]+)?mod[ \t]+([a-zA-Z0-9_]+)/\2/m,modules,module names/
--regex-Rust=/^[ \t]*(pub[ \t]+)?static[ \t]+([a-zA-Z0-9_]+)/\2/c,consts,static constants/
--regex-Rust=/^[ \t]*(pub[ \t]+)?struct[ \t]+([a-zA-Z0-9_]+)/\2/s,structure names/
--regex-Rust=/^[ \t]*(pub[ \t]+)?trait[ \t]+([a-zA-Z0-9_]+)/\2/t,traits,traits/
--regex-Rust=/^[ \t]*(pub[ \t]+)?type[ \t]+([a-zA-Z0-9_]+)/\2/T,types,type definitions/
--regex-Rust=/^[ \t]*macro_rules![ \t]+([a-zA-Z0-9_]+)/\1/d,macros,macro definitions/


--languages=sh,python,Rust,css,html,mediawiki,markdown,rst,javascript,vorg,vim,java
